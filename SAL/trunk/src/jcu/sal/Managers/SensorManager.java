/**
 * 
 */
package jcu.sal.Managers;

import java.text.ParseException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.naming.ConfigurationException;
import javax.xml.parsers.ParserConfigurationException;

import jcu.sal.Components.Identifiers.Identifier;
import jcu.sal.Components.Identifiers.SensorID;
import jcu.sal.Components.Sensors.Sensor;
import jcu.sal.utils.Slog;
import jcu.sal.utils.XMLhelper;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;


/**
 * @author gilles
 * 
 */
public class SensorManager extends ManagerFactory<Sensor> {
	
	/**
	 * The following string must be used in partially generated SML
	 * docs (like the ones autogenerated when a new sensor is detected).
	 * The marker will be replaced by an appropriate sensor ID when
	 * a sensor object is created.
	 */
	public static String SENSORID_MARKER="%AUTOSENSORID%";
	
	private static SensorManager s = new SensorManager();
	private Logger logger = Logger.getLogger(SensorManager.class);
	
	
	/**
	 * Private constructor
	 */
	private SensorManager() {
		super();
		Slog.setupLogger(this.logger);
	}
	
	/**
	 * Returns the instance of the SensorManager 
	 * @return
	 */
	static SensorManager getSensorManager() {
		return s;
	}

	/* (non-Javadoc)
	 * @see jcu.sal.Managers.ManagerFactory#build(org.w3c.dom.Document)
	 */
	@Override
	protected Sensor build(Node n) throws InstantiationException {
		SensorID i = null;
		Sensor sensor = null;
		
		this.logger.debug("building Sensor");
		try {
			i = (SensorID) this.getComponentID(n);
			this.logger.debug("Component type: " + getComponentType(n));
			sensor = new Sensor(i, getComponentConfig(n));
		} catch (ParseException e) {
			this.logger.error("Error while parsing the DOM document. XML doc:");
			this.logger.error(XMLhelper.toString(n));
			//e.printStackTrace();
			throw new InstantiationException();
		} catch (ConfigurationException e) {
			this.logger.error("Couldnt instanciate the sensor: " + i.toString());
			//e.printStackTrace();
			throw new InstantiationException();
		} 
		return sensor;
	}
	
	/* (non-Javadoc)
	 * @see jcu.sal.Managers.ManagerFactory#getComponentID(org.w3c.dom.Document)
	 */
	@Override
	protected Identifier getComponentID(Node n) throws ParseException {
		Identifier id = null;
		try {
			id = new SensorID(XMLhelper.getAttributeFromName("//" + Sensor.SENSOR_TAG, Sensor.SENSORID_TAG, n) );
			logger.error("Sensor id: " + id.toString());
		} catch (Exception e) {
			logger.error("Couldnt find the Sensor id");
			e.printStackTrace();
			throw new ParseException("Couldnt create the Sensor identifier", 0);
		}
		return id;
	}
	
	/* (non-Javadoc)
	 * @see jcu.sal.Managers.ManagerFactory#remove(java.lang.Object)
	 */
	@Override
	protected void remove(Sensor component) {
		component.remove(this);
	}
	
	
	Sensor createSensorFromPartialSML(String s) {
		Sensor ss = null;
		try {
			String t = s.replace(SENSORID_MARKER, generateNewSensorID());
			logger.debug("XML doc after replacing SENSORID:" + t);
			Node n = XMLhelper.createDocument(t);
			ss = createComponent(n);
		} catch (ConfigurationException e) {
			logger.error("new sensor creation failed");
		} catch (ParserConfigurationException e) {
			logger.error("Cant create the new sensor, incorrect SML document");
		}
		return ss;
	}
	
	/**
	 * Returns the first available unused sensor ID
	 * @return the first available unused sensor ID
	 */
	private String generateNewSensorID() {
		int[] arr = new int[ctable.size()];
		Enumeration<Identifier> e = ctable.keys();
		int i=0;
		while(e.hasMoreElements()){
			arr[i++] = Integer.parseInt(e.nextElement().getName());
		}
		Arrays.sort(arr);
		if(arr[0]==1) {
			for (i = 1; i < arr.length; i++) {
				if(arr[i]>(arr[i-1]+1)) {
					break;
				}
			}
			i=arr[i-1]+1;
		} else i=1;
		
		return String.valueOf(i);
	}
	
	@Override
	protected String getComponentType(Node n) throws ParseException {
		return Sensor.SENSOR_TYPE;
	}
	
	public static void main(String[] a){
		int i=0;
		Hashtable<String, String> t = new Hashtable<String, String>();
		t.put("13", "val1");
		t.put("2", "val5");
		t.put("4", "val5");
		t.put("4", "val5");
		t.put("5", "val5");
		t.put("9", "val10");
		t.put("7", "val7");
		t.put("10", "val13");
		t.put("6", "val6");
		t.put("8", "val8");
		int[] arr = new int[t.size()];
		Enumeration<String> e = t.keys();
		while(e.hasMoreElements()){
			arr[i++] = Integer.parseInt(e.nextElement());
		}
		Arrays.sort(arr);
		
		for (int j = 0; j < arr.length; j++) {
			System.out.println("Element " + j + ": "+arr[j]);
		}
		int j;
		if(arr[0]==1) {
		for (j = 1; j < arr.length; j++) {
			if(arr[j]>(arr[j-1]+1)) {
				break;
			}
		}
		i=arr[j-1]+1;
		}
		else i=1;
		
		
		System.out.println("Found: "+ i);
	
	}
}
