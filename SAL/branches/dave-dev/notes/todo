
TODO
====

Ongoing
-------

- Keep the worklog up to date
- When a logical unit of code is completed
  - Javadoc it
  - unit test it
- Checkin regularly

Overall List
------------

- create client / server interfaces and code
  - Server will need a list of ServerCommManagers, one for each type of supported transport
    - swing can set up the list (as well as the transports it contains)

- get XML stuff working
   - might have to create different root element types for different documents
   - Giles seems to have various constraints he's imposing on the config files
- write XML tests for marshalling / unmarshalling and validation

- separate the UI from the client
- use command pattern to clean up the client side commands

- review events / sensors / protocols etc...
  - attempt to make sensors / protocols pluggable 

- possibly use ANTLR for a friendlier command line interface with the current one supported as the hotkeys

- second version of DirectoryClassLoader
  - see class header comments for notes

Dream features, not too hard
============================

- look at using antlr to commands to / from strings (and then validate)
  - [a, b, c] (array)
  - 'Str\'i\\ng' (String - either quote works)
  - 123 (Integer)
  - 1.23e4 (Float)
  - tRue (Boolean)
  - 0xF7 (Binary)
  - messageName(args,...)+ (isFinal is false)
  - messageName(args,...)
  - GrowCommand("t", 4) 
    -> GrowResponse(["tt", "tt", "ttt", "tttt"])
  - GrowSequenceCommand("t", 4)
    -> GrowSequenceResponse("t")+
    -> GrowSequenceResponse("tt")+
    -> GrowSequenceResponse("ttt")+
    -> GrowSequenceResponse("tttt")

- need a nice string output for the descriptions as well
  - a list of possible responses would make things easier to work with

- look at using soot to generate custom message classes from descriptions
  - just add constructors, setters and getters based on the description
  - if we can do it with a maven plugin we can probably extend it later

- if commands have addresses we can have local commands
  - then we can do things like
    - GrowSequenceCommand("t", 4) -> FileWriter("file.txt")
  - also requires streaming inputs to commands
  - if a response is not handled it's displayed
  - some kind of metadata could help users introspect
    - show local commands in the storage category
      - showCommand("local", "storage")
  - local variable placeholders could be used
    - neatens things up a bit

    - GrowSequenceCommand("t", 4) -> a
    - GrowSequenceCommand("u", 5) -> b
    - If(true, a, b) -> c
    - FileWriter(c, "file.txt")

    - a (displays data received so far)
    - 2 -> a (adds a value to a stream)
    - FileWriter(a, "newFile.txt")   
       (if +a were used we'd dump all the previously received data as well)
    - 2 -> a (writes 2 to the file)

    - variables maintain a list of listeners
    - a -> b
    - b -> a
    - 2 -> a (causes a loop)
      - can ban loops
      - can hope they used an if and let Ctrl-C pause everything

- look at ActiveMQ / Camel and/or JMS to manage messages
  - means it's someone elses problem
  - probably good to have some experience with it
  - might be an easier integration point with dataturbine etc...

Short Term List
---------------

- for tcp binary codec
  - needs the ability to request the description when receiving an unfamiliar type
    - a cache would be pretty handy here
    - modification times might be useful as well in case someone updates a description
  - might consider a pure binary form of the protocol later on
  - differential length encoding for length fields
    - add bytes until high bit is clear
      -ie 0x7F, 0x01 0x80
  - add session based chunking to the encoders / decoders
    - have a constant for the maximum size to recieve at once
    - grab that amount of data over and over until size is reached
    - prevents oversize packet based DOS by cpu
    - probably want to set an absolute max size to limit DOS by memory
      - or two limits
        - first switches to file backed storage of buffer
        - second is hard upper limit 
    - use configurable limits

- add exception handling and logging support to the comms code
- javadoc comms code

- write xml helpers
- add unit tests for xml helpers
- javadoc for any xml helpers

- add unit tests for plugin code
- javadoc plugin code

Today
-----

- change binary codec to string codec
  - make it use a subclassed type factory to do the encoding / decoding work
  - if we get the description request from the binary codec and the ANTLR stuff working we 
    can just to / from string it...
- write actual binary codec
  - make sure that the marshalling and unmarshalling of all of the types is tested

- javadoc everything in xml, message and comms

- do the antlr fun stuff
  - if the antlr fun is over too soon, commence the soot fun stuff
  - with a factory we can create commands from a map of names -> descriptions

- test client / server code over multiple machines

- change grow factory to use a hashmap of names / descriptions for description retrieval
  - potential spin off into a base class with convinience method to load descriptions from a directory
    - possibly even from a resource path
  - will be much easier post ANTLR fun

- finish off xml helpers / classes for configuration files and write tests
- javadoc everything
  - except plugin (wait until new version)
- start writing SAL command factories




